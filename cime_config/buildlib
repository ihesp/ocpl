#!/usr/bin/env python

##############################################################################
#
##############################################################################

import os, shutil, sys, glob, imp

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import expect, run_cmd, run_sub_or_cmd
from CIME.buildlib import parse_input

logger = logging.getLogger(__name__)

###############################################################################
def _build_ocpl():
###############################################################################

    caseroot, libroot, bldroot = parse_input(sys.argv)
    print("<ocpl:_build_ocpl> argv caseroot = %s" % caseroot   )
    print("<ocpl:_build_ocpl> argv  libroot = %s" %  libroot   )
    print("<ocpl:_build_ocpl> argv  bldroot = %s" %  bldroot   )

    logger.info("-----------------------------------------------------------------")
    logger.info("ocpl buildlib calling pop buildlib...")
    logger.info("-----------------------------------------------------------------")

    with Case(caseroot) as case:
       cimeroot = case.get_value("CIMEROOT")
       srcroot = case.get_value("SRCROOT")
       exeroot = case.get_value("EXEROOT")
       print("<ocpl:_build_ocpl> cimeroot = %s" % cimeroot   )
       print("<ocpl:_build_ocpl>  srcroot = %s" %  srcroot   )
       print("<ocpl:_build_ocpl>  exeroot = %s" %  exeroot   )

       lid = os.getenv("LID")
       print("<ocpl:_build_ocpl> lid      = %s" %  lid       )

       # my_file is the full path name of the buildlib that you are calling
       my_file = os.path.join(srcroot, "components", "pop", "cime_config", "buildlib") 
       # same args received by ocpl buildlib are sent to pop's buildlib
       cmd_line_args = " {} {} {}".format(caseroot,libroot,bldroot)

       print("<ocpl:_build_ocpl> my_file     = %s" % my_file   )
       print("<ocpl:_build_ocpl> cmd_lin_args= %s" % cmd_line_args)

       run_sub_or_cmd(my_file, [cmd_line_args],'dontfind',[bldroot,libroot,caseroot])
#      rc,stdout,stderr = run_sub_or_cmd(my_file, [cmd_line_args                      ], 
#                                      'dontfind',[bldroot      , libroot   , caseroot])
#      expect(rc == 0, "pop buildlib failure")

       #---- "hide" pop Filepath, etc., as obj dir is shared by other builds ---
       objroot = case.get_value("OBJROOT")
       filepath_file  = os.path.join(objroot,"ocn","obj","Filepath")
       depends_file   = os.path.join(objroot,"ocn","obj","Depends")
       deppath_file   = os.path.join(objroot,"ocn","obj","Deppath")
       filepath_file0 = os.path.join(objroot,"ocn","obj","Filepath.pop")
       depends_file0  = os.path.join(objroot,"ocn","obj", "Depends.pop")
       deppath_file0  = os.path.join(objroot,"ocn","obj", "Deppath.pop")
       os.rename(filepath_file,filepath_file0)
       os.rename(depends_file , depends_file0)
       os.rename(deppath_file , deppath_file0)

    logger.info("-----------------------------------------------------------------")
    logger.info("ocpl buildlib calling roms buildlib...")
    logger.info("-----------------------------------------------------------------")

    with Case(caseroot) as case:
       cimeroot = case.get_value("CIMEROOT")
       srcroot = case.get_value("SRCROOT")
       exeroot = case.get_value("EXEROOT")
       print("<ocpl:_build_ocpl> cimeroot = %s" % cimeroot   )
       print("<ocpl:_build_ocpl>  srcroot = %s" %  srcroot   )
       print("<ocpl:_build_ocpl>  exeroot = %s" %  exeroot   )

       lid = os.getenv("LID")
       print("<ocpl:_build_ocpl> lid      = %s" %  lid       )

       # my_file is the full path name of the buildlib that you are calling
       my_file = os.path.join(srcroot, "components", "roms", "cime_config", "buildlib") 
       # same args received by ocpl buildlib are sent to pop's buildlib
       cmd_line_args = " {} {} {}".format(caseroot,libroot,bldroot)

       print("<ocpl:_build_ocpl> my_file     = %s" % my_file   )
       print("<ocpl:_build_ocpl> cmd_lin_args= %s" % cmd_line_args)

       run_sub_or_cmd(my_file, [cmd_line_args],'dontfind',[bldroot,libroot,caseroot])
#                                      'dontfind',[bldroot      , libroot   , caseroot])
#      rc,stdout,stderr = run_sub_or_cmd(my_file, [cmd_line_args                      ], 
#                                      'dontfind',[bldroot      , libroot   , caseroot])
#      expect(rc == 0, "roms buildlib failure")

       #---- "hide" roms Filepath, etc., as obj dir is shared by other builds ---
       objroot = case.get_value("OBJROOT")
       filepath_file  = os.path.join(objroot,"ocn","obj","Filepath")
       depends_file   = os.path.join(objroot,"ocn","obj","Depends")
       deppath_file   = os.path.join(objroot,"ocn","obj","Deppath")
       makedep_file   = os.path.join(objroot,"ocn","obj","MakeDepend")
       srcfile_file   = os.path.join(objroot,"ocn","obj","Srcfiles")
       filepath_file0 = os.path.join(objroot,"ocn","obj",  "Filepath.roms")
       depends_file0  = os.path.join(objroot,"ocn","obj",   "Depends.roms")
       deppath_file0  = os.path.join(objroot,"ocn","obj",   "Deppath.roms")
       makedep_file0  = os.path.join(objroot,"ocn","obj","MakeDepend.roms")
       srcfile_file0  = os.path.join(objroot,"ocn","obj",  "Srcfiles.roms")
       os.rename(filepath_file,filepath_file0)
       os.rename(depends_file , depends_file0)
       os.rename(deppath_file , deppath_file0)
       os.rename(makedep_file , makedep_file0)
       os.rename(srcfile_file , srcfile_file0)

    logger.info("-----------------------------------------------------------------")
    logger.info("ocpl buildlib building ocpl...")
    logger.info("-----------------------------------------------------------------")

    caseroot, libroot, bldroot = parse_input(sys.argv)

    with Case(caseroot) as case:
        casetools = case.get_value("CASETOOLS")
        gmake_j   = case.get_value("GMAKE_J")
        gmake     = case.get_value("GMAKE")
        srcroot   = case.get_value("SRCROOT")

#       # call buildcpp  to set the cppdefs
#       cmd = os.path.join(os.path.join(srcroot,"components","ocpl","cime_config","buildcpp"))
#       logger.info("     ...calling ocpl buildcpp to set build time options")
#       try:
#           mod = imp.load_source("buildcpp", cmd)
#           ocpl_cppdefs = mod.buildcpp(case)
#       except:
#           raise

        # create Filepath file
        #---- "hide" pop Filepath, etc., as obj dir is shared by ocpl, pop ---
        objroot = case.get_value("OBJROOT")
        filepath_file = os.path.join(objroot,"ocn","obj","Filepath")
        depends_file = os.path.join(objroot,"ocn","obj","Depends")
        deppath_file = os.path.join(objroot,"ocn","obj","Deppath")
        if not os.path.isfile(filepath_file):
            srcroot = case.get_value("SRCROOT")
            caseroot = case.get_value("CASEROOT")
            paths = [os.path.join(caseroot,"SourceMods","src.ocpl"), 
                     os.path.join(srcroot,"components","ocpl","src")]
            with open(filepath_file, "w") as filepath:
                filepath.write("\n".join(paths))
                filepath.write("\n")
        srcroot = case.get_value("SRCROOT")
        caseroot = case.get_value("CASEROOT")
        paths = [os.path.join(caseroot,"SourceMods","src.ocpl"), 
                 os.path.join(srcroot,"components","ocpl","src")]
        with open(filepath_file, "w") as filepath:
            filepath.write("\n".join(paths))
            filepath.write("\n")

        # build the library
        complib = os.path.join(libroot,"libocn.a")
        makefile = os.path.join(casetools, "Makefile")

#       cmd = "%s complib -j %d MODEL=ocpl COMPLIB=%s -f %s USER_CPPDEFS=\"%s\"" \
#           % (gmake, gmake_j, complib, makefile, ocpl_cppdefs )
        cmd = "%s complib -j %d MODEL=ocpl COMPLIB=%s -f %s                    " \
            % (gmake, gmake_j, complib, makefile               )

        rc, out, err = run_cmd(cmd, from_dir=bldroot)
        expect(rc == 0, "Command %s failed rc=%d\nout=%s\nerr=%s" % (cmd, rc, out, err))

        logger.info("Command %s completed with output %s\nerr %s" ,cmd, out, err)

        #---- "hide" ocpl Filepath, etc., as obj dir is shared by other builds ---
        filepath_file  = os.path.join(objroot,"ocn","obj","Filepath")
        depends_file   = os.path.join(objroot,"ocn","obj","Depends")
        deppath_file   = os.path.join(objroot,"ocn","obj","Deppath")
        filepath_file0 = os.path.join(objroot,"ocn","obj","Filepath.ocpl")
        depends_file0  = os.path.join(objroot,"ocn","obj", "Depends.ocpl")
        deppath_file0  = os.path.join(objroot,"ocn","obj", "Deppath.ocpl")
        os.rename(filepath_file,filepath_file0)
        os.rename(depends_file , depends_file0)
        os.rename(deppath_file , deppath_file0)

###############################################################################

if __name__ == "__main__":
    _build_ocpl()
