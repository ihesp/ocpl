#!/usr/bin/env python

##############################################################################
#
##############################################################################

import os, shutil, sys, glob, imp

CIMEROOT = os.environ.get("CIMEROOT")
if CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(CIMEROOT, "scripts", "Tools"))

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import expect, run_cmd, run_sub_or_cmd
from CIME.buildlib import parse_input

logger = logging.getLogger(__name__)

###############################################################################
def _build_ocpl():
###############################################################################

    caseroot, libroot, bldroot = parse_input(sys.argv)
    print("<ocpl:_build_ocpl> argv caseroot = %s" % caseroot   )
    print("<ocpl:_build_ocpl> argv  libroot = %s" %  libroot   )
    print("<ocpl:_build_ocpl> argv  bldroot = %s" %  bldroot   )

    logger.info("-----------------------------------------------------------------")
    logger.info("ocpl buildlib calling pop buildlib...")
    logger.info("-----------------------------------------------------------------")

    with Case(caseroot) as case:
       cimeroot = case.get_value("CIMEROOT")
       srcroot = case.get_value("SRCROOT")
       exeroot = case.get_value("EXEROOT")
       print("<ocpl:_build_ocpl> cimeroot = %s" % cimeroot   )
       print("<ocpl:_build_ocpl>  srcroot = %s" %  srcroot   )
       print("<ocpl:_build_ocpl>  exeroot = %s" %  exeroot   )

       lid = os.getenv("LID")
       print("<ocpl:_build_ocpl> lid      = %s" %  lid       )

       # my_file is the full path name of the buildlib that you are calling
       my_file = os.path.join(srcroot, "components", "pop", "cime_config", "buildlib")

       print("libroot {} bldroot {}".format(libroot, bldroot+".pop"))
       if not os.path.exists(bldroot+".pop"):
           os.makedirs(bldroot+".pop")

       cmd_line_args = " {} {} {}".format(caseroot,libroot,bldroot+".pop")

       print("<ocpl:_build_ocpl> my_file     = %s" % my_file   )
       print("<ocpl:_build_ocpl> cmd_lin_args= %s" % cmd_line_args)

       run_sub_or_cmd(my_file, [cmd_line_args],'dontfind',[bldroot+".pop",libroot,caseroot])

       objroot = case.get_value("OBJROOT")
       if not os.path.isdir(objroot):
           os.makedirs(objroot)

    logger.info("-----------------------------------------------------------------")
    logger.info("ocpl buildlib calling roms buildlib...")
    logger.info("-----------------------------------------------------------------")

    with Case(caseroot) as case:
       cimeroot = case.get_value("CIMEROOT")
       srcroot = case.get_value("SRCROOT")
       exeroot = case.get_value("EXEROOT")
       print("<ocpl:_build_ocpl> cimeroot = %s" % cimeroot   )
       print("<ocpl:_build_ocpl>  srcroot = %s" %  srcroot   )
       print("<ocpl:_build_ocpl>  exeroot = %s" %  exeroot   )

       lid = os.getenv("LID")
       print("<ocpl:_build_ocpl> lid      = %s" %  lid       )

       # my_file is the full path name of the buildlib that you are calling
       my_file = os.path.join(srcroot, "components", "roms", "cime_config", "buildlib")
       # same args received by ocpl buildlib are sent to pop's buildlib
       cmd_line_args = " {} {} {}".format(caseroot,libroot,bldroot+".roms")

       print("<ocpl:_build_ocpl> my_file     = %s" % my_file   )
       print("<ocpl:_build_ocpl> cmd_lin_args= %s" % cmd_line_args)

       run_sub_or_cmd(my_file, [cmd_line_args],'dontfind',[bldroot,libroot,caseroot])

       #---- "hide" roms Filepath, etc., as obj dir is shared by other builds ---

    logger.info("-----------------------------------------------------------------")
    logger.info("ocpl buildlib building ocpl...")
    logger.info("-----------------------------------------------------------------")

    caseroot, libroot, bldroot = parse_input(sys.argv)

    with Case(caseroot) as case:
        casetools = case.get_value("CASETOOLS")
        gmake_j   = case.get_value("GMAKE_J")
        gmake     = case.get_value("GMAKE")
        srcroot   = case.get_value("SRCROOT")

        # create Filepath file
        #---- "hide" pop Filepath, etc., as obj dir is shared by ocpl, pop ---
        filepath_file = os.path.join(objroot,"ocn","obj","Filepath")
        if not os.path.isfile(filepath_file):
            srcroot = case.get_value("SRCROOT")
            caseroot = case.get_value("CASEROOT")
            paths = [os.path.join(caseroot,"SourceMods","src.ocpl"),
                     os.path.join(srcroot,"components","ocpl","src")]
            with open(filepath_file, "w") as filepath:
                filepath.write("\n".join(paths))
                filepath.write("\n")

        # build the library
        complib = os.path.join(libroot,"libocpl.a")
        makefile = os.path.join(casetools, "Makefile")

#       cmd = "%s complib -j %d MODEL=ocpl COMPLIB=%s -f %s USER_CPPDEFS=\"%s\"" \
#           % (gmake, gmake_j, complib, makefile, ocpl_cppdefs )
        ocpl_cppdefs = "-I{bldroot} -I{bldroot}.roms -I{bldroot}.pop".format(bldroot=bldroot)
        cmd = "{} complib -j {} MODEL=ocpl USER_CPPDEFS=\"{}\" COMPLIB={} -f {} " \
              .format(gmake, gmake_j, ocpl_cppdefs, complib, makefile)

        rc, out, err = run_cmd(cmd, from_dir=bldroot, verbose=True)
        expect(rc == 0, "Command %s failed rc=%d\nout=%s\nerr=%s" % (cmd, rc, out, err))

        logger.info("Command %s completed with output %s\nerr %s" ,cmd, out, err)

###############################################################################

if __name__ == "__main__":
    _build_ocpl()
